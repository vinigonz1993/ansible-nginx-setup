---
- name: Ensure Nginx is installed
  apt:
    name: nginx
    state: present
    update_cache: yes

- name: Ensure Certbot and Nginx plugin are installed
  apt:
    name:
      - certbot
      - python3-certbot-nginx
    state: present

- name: Create directory for ACME challenges
  file:
    path: /var/www/certbot
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'

- name: Render Nginx config for backend
  template:
    src: nginx_site.conf.j2
    dest: /etc/nginx/sites-available/{{ api_domain }}.conf
  vars:
    domain: "{{ api_domain }}"
    backend_port: "{{ api_port }}"

- name: Render Nginx config for frontend
  template:
    src: nginx_site.conf.j2
    dest: /etc/nginx/sites-available/{{ frontend_domain }}.conf
  vars:
    domain: "{{ frontend_domain }}"
    backend_port: "{{ frontend_port }}"

- name: Enable backend site
  file:
    src: /etc/nginx/sites-available/{{ api_domain }}.conf
    dest: /etc/nginx/sites-enabled/{{ api_domain }}.conf
    state: link
    force: yes

- name: Enable frontend site
  file:
    src: /etc/nginx/sites-available/{{ frontend_domain }}.conf
    dest: /etc/nginx/sites-enabled/{{ frontend_domain }}.conf
    state: link
    force: yes

- name: Test Nginx configuration
  command: nginx -t
  register: nginx_test
  failed_when: "'successful' not in nginx_test.stdout + nginx_test.stderr"

- name: Reload Nginx
  service:
    name: nginx
    state: reloaded

- name: Obtain SSL certificate for backend
  command: >
    certbot certonly --nginx -n --agree-tos
    --email {{ lookup('env','EMAIL') }}
    -d {{ api_domain }}
  args:
    creates: /etc/letsencrypt/live/{{ api_domain }}/fullchain.pem

- name: Obtain SSL certificate for frontend
  command: >
    certbot certonly --nginx -n --agree-tos
    --email {{ lookup('env','EMAIL') }}
    -d {{ frontend_domain }}
  args:
    creates: /etc/letsencrypt/live/{{ frontend_domain }}/fullchain.pem

- name: Reload Nginx after SSL
  service:
    name: nginx
    state: reloaded
